{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-13T16:59:30.815986Z",
     "iopub.status.busy": "2020-10-13T16:59:30.815429Z",
     "iopub.status.idle": "2020-10-13T16:59:30.824979Z",
     "shell.execute_reply": "2020-10-13T16:59:30.825432Z"
    },
    "papermill": {
     "duration": 0.061743,
     "end_time": "2020-10-13T16:59:30.825584",
     "exception": false,
     "start_time": "2020-10-13T16:59:30.763841",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# hide\n",
    "import sys\n",
    "sys.path.append(\"..\")\n",
    "%load_ext autoreload\n",
    "%autoreload 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.035109,
     "end_time": "2020-10-13T16:59:30.897667",
     "exception": false,
     "start_time": "2020-10-13T16:59:30.862558",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Motion classification with time series using deep learning\n",
    "\n",
    "> Classify between chaotic, rotational and librational motion using the evolution of the coordinates x and y in the Poincare map"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.03503,
     "end_time": "2020-10-13T16:59:30.967744",
     "exception": false,
     "start_time": "2020-10-13T16:59:30.932714",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Requirements"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-13T16:59:31.044085Z",
     "iopub.status.busy": "2020-10-13T16:59:31.043579Z",
     "iopub.status.idle": "2020-10-13T16:59:31.054021Z",
     "shell.execute_reply": "2020-10-13T16:59:31.053327Z"
    },
    "papermill": {
     "duration": 0.051353,
     "end_time": "2020-10-13T16:59:31.054202",
     "exception": false,
     "start_time": "2020-10-13T16:59:31.002849",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import sys\n",
    "ISCOLAB = 'google.colab' in sys.modules\n",
    "if ISCOLAB:\n",
    "    !pip install git+https://github.com/fastai/fastcore.git@master -q\n",
    "    !pip install git+https://github.com/fastai/fastai2.git@master -q\n",
    "    !pip install git+https://github.com/ai-fast-track/timeseries.git -q\n",
    "    !pip install wandb -q"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-13T16:59:31.134712Z",
     "iopub.status.busy": "2020-10-13T16:59:31.134183Z",
     "iopub.status.idle": "2020-10-13T16:59:32.845079Z",
     "shell.execute_reply": "2020-10-13T16:59:32.845512Z"
    },
    "papermill": {
     "duration": 1.750503,
     "end_time": "2020-10-13T16:59:32.845645",
     "exception": false,
     "start_time": "2020-10-13T16:59:31.095142",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from fastai.basics import *\n",
    "from timeseries.all import *\n",
    "from mlchaos.all import *\n",
    "import wandb\n",
    "from fastai.callback.wandb import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-13T16:59:32.921094Z",
     "iopub.status.busy": "2020-10-13T16:59:32.920483Z",
     "iopub.status.idle": "2020-10-13T16:59:32.943840Z",
     "shell.execute_reply": "2020-10-13T16:59:32.943304Z"
    },
    "papermill": {
     "duration": 0.061976,
     "end_time": "2020-10-13T16:59:32.943950",
     "exception": false,
     "start_time": "2020-10-13T16:59:32.881974",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "base_path = Path.home()\n",
    "ds_path = base_path/'data/fli_rotnum/model_1'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.035639,
     "end_time": "2020-10-13T16:59:33.016612",
     "exception": false,
     "start_time": "2020-10-13T16:59:32.980973",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Notebook parameters \n",
    "Put here everything that could be needed if this notebook was called from outside, as an script"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-13T16:59:33.091614Z",
     "iopub.status.busy": "2020-10-13T16:59:33.091095Z",
     "iopub.status.idle": "2020-10-13T16:59:33.114846Z",
     "shell.execute_reply": "2020-10-13T16:59:33.114293Z"
    },
    "papermill": {
     "duration": 0.062696,
     "end_time": "2020-10-13T16:59:33.114957",
     "exception": false,
     "start_time": "2020-10-13T16:59:33.052261",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "use_wandb = True # Whether to use or not wandb for experiment tracking\n",
    "wandb_group = 'None' # Whether to group this run in a wandb group\n",
    "resampling_period = None # * Natural number. Set to None if no resampling is desired\n",
    "labelling_method = \"fli\" # [fli, freq_ana, birkhoff_avg]\n",
    "fnames = [\n",
    "    (ds_path/'eps=0.021/Poincare.plt', ds_path/'eps=0.021/index_fli_rotnum_birav.plt'),\n",
    "    (ds_path/'eps=0.022/Poincare.plt', ds_path/'eps=0.022/index_fli_rotnum_birav.plt'), \n",
    "    (ds_path/'eps=0.023/Poincare.plt', ds_path/'eps=0.023/index_fli_rotnum_birav.plt'), \n",
    "    (ds_path/'eps=0.024/Poincare.plt', ds_path/'eps=0.024/index_fli_rotnum_birav.plt'), \n",
    "    (ds_path/'eps=0.025/Poincare.plt', ds_path/'eps=0.025/index_fli_rotnum_birav.plt'), \n",
    "]\n",
    "val_dataset = 'eps=0.023' # * The rest of the datasets in fnames will be used for training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-13T16:59:33.191732Z",
     "iopub.status.busy": "2020-10-13T16:59:33.191193Z",
     "iopub.status.idle": "2020-10-13T16:59:33.214466Z",
     "shell.execute_reply": "2020-10-13T16:59:33.214922Z"
    },
    "papermill": {
     "duration": 0.062587,
     "end_time": "2020-10-13T16:59:33.215052",
     "exception": false,
     "start_time": "2020-10-13T16:59:33.152465",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "use_wandb = True\n",
    "wandb_group = \"x_labelling_method\"\n",
    "labelling_method = \"fli\"\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.035984,
     "end_time": "2020-10-13T16:59:33.287520",
     "exception": false,
     "start_time": "2020-10-13T16:59:33.251536",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Syncing with Weights & Biases\n",
    "\n",
    "For large experiments, when this notebooks is called from outside with different parameters, it is important to use wandb to track the results and config of this notebook and to track and aggregate the results online afterwards."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-13T16:59:33.363147Z",
     "iopub.status.busy": "2020-10-13T16:59:33.362630Z",
     "iopub.status.idle": "2020-10-13T16:59:34.959891Z",
     "shell.execute_reply": "2020-10-13T16:59:34.959283Z"
    },
    "papermill": {
     "duration": 1.636207,
     "end_time": "2020-10-13T16:59:34.960051",
     "exception": false,
     "start_time": "2020-10-13T16:59:33.323844",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Failed to query for notebook name, you can set it manually with the WANDB_NOTEBOOK_NAME environment variable\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mvrodriguezf\u001b[0m (use `wandb login --relogin` to force relogin)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.5 is available!  To upgrade, please run:\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "\n",
       "                Tracking run with wandb version 0.10.4<br/>\n",
       "                Syncing run <strong style=\"color:#cdcd00\">royal-dragon-182</strong> to <a href=\"https://wandb.ai\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n",
       "                Project page: <a href=\"https://wandb.ai/vrodriguezf/mlchaos\" target=\"_blank\">https://wandb.ai/vrodriguezf/mlchaos</a><br/>\n",
       "                Run page: <a href=\"https://wandb.ai/vrodriguezf/mlchaos/runs/1nm0z5un\" target=\"_blank\">https://wandb.ai/vrodriguezf/mlchaos/runs/1nm0z5un</a><br/>\n",
       "                Run data is saved locally in <code>wandb/run-20201013_165933-1nm0z5un</code><br/><br/>\n",
       "            "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "if not use_wandb:\n",
    "    os.environ['WANDB_MODE'] = 'dryrun' # run offline\n",
    "    wandb.init(anonymous='allow', allow_val_change=True)\n",
    "else:\n",
    "    os.environ['WANDB_MODE'] = 'run'\n",
    "    wandb.init(entity=\"vrodriguezf\", project='mlchaos', group=wandb_group)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.036911,
     "end_time": "2020-10-13T16:59:35.035935",
     "exception": false,
     "start_time": "2020-10-13T16:59:34.999024",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Loading the data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.036731,
     "end_time": "2020-10-13T16:59:35.109834",
     "exception": false,
     "start_time": "2020-10-13T16:59:35.073103",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The data must be loaded as a `TSDataChaos` object, created from a pair (or a sequence of pairs) of files:\n",
    "1. The first file of the pair contains the data of the Poincare map\n",
    "2. The second file of the pair contains the index of the motion (0.0, 1.0 or 2.0). The column that contains the index is given as a parameter of this notebook\n",
    "\n",
    "Depending on the labelling method, a different column from the index file will be used as `y` on the data. `x` will always be the time series."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-13T16:59:35.193452Z",
     "iopub.status.busy": "2020-10-13T16:59:35.192772Z",
     "iopub.status.idle": "2020-10-13T16:59:35.222176Z",
     "shell.execute_reply": "2020-10-13T16:59:35.221661Z"
    },
    "papermill": {
     "duration": 0.075265,
     "end_time": "2020-10-13T16:59:35.222301",
     "exception": false,
     "start_time": "2020-10-13T16:59:35.147036",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "wandb.config.labelling_method = labelling_method\n",
    "index_cols = {\n",
    "    \"fli\": 4,\n",
    "    \"freq_ana\": 5,\n",
    "    \"birkhoff_avg\": 6\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-13T16:59:35.301038Z",
     "iopub.status.busy": "2020-10-13T16:59:35.300528Z",
     "iopub.status.idle": "2020-10-13T16:59:45.084023Z",
     "shell.execute_reply": "2020-10-13T16:59:45.084463Z"
    },
    "papermill": {
     "duration": 9.823846,
     "end_time": "2020-10-13T16:59:45.084594",
     "exception": false,
     "start_time": "2020-10-13T16:59:35.260748",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "TSDataChaos:\n",
       " Datasets names (concatenated): ['eps=0.021', 'eps=0.022', 'eps=0.023', 'eps=0.024', 'eps=0.025']\n",
       " Filenames:                     [(Path('/home/user/data/fli_rotnum/model_1/eps=0.021/Poincare.plt'), Path('/home/user/data/fli_rotnum/model_1/eps=0.021/index_fli_rotnum_birav.plt')), (Path('/home/user/data/fli_rotnum/model_1/eps=0.022/Poincare.plt'), Path('/home/user/data/fli_rotnum/model_1/eps=0.022/index_fli_rotnum_birav.plt')), (Path('/home/user/data/fli_rotnum/model_1/eps=0.023/Poincare.plt'), Path('/home/user/data/fli_rotnum/model_1/eps=0.023/index_fli_rotnum_birav.plt')), (Path('/home/user/data/fli_rotnum/model_1/eps=0.024/Poincare.plt'), Path('/home/user/data/fli_rotnum/model_1/eps=0.024/index_fli_rotnum_birav.plt')), (Path('/home/user/data/fli_rotnum/model_1/eps=0.025/Poincare.plt'), Path('/home/user/data/fli_rotnum/model_1/eps=0.025/index_fli_rotnum_birav.plt'))]\n",
       " Data shape: (51005, 2, 201)\n",
       " Targets shape: (51005,)\n",
       " Nb Samples: 51005\n",
       " Nb Channels:           2\n",
       " Sequence Length: 201"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "wandb.config.fnames = fnames\n",
    "data = TSDataChaos.from_poincare_and_index_files(fnames, \n",
    "                                                 index_col=index_cols[labelling_method])\n",
    "data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.037784,
     "end_time": "2020-10-13T16:59:45.160557",
     "exception": false,
     "start_time": "2020-10-13T16:59:45.122773",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Check the distribution of classes in the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-13T16:59:45.240922Z",
     "iopub.status.busy": "2020-10-13T16:59:45.240424Z",
     "iopub.status.idle": "2020-10-13T16:59:45.268774Z",
     "shell.execute_reply": "2020-10-13T16:59:45.268315Z"
    },
    "papermill": {
     "duration": 0.068721,
     "end_time": "2020-10-13T16:59:45.268890",
     "exception": false,
     "start_time": "2020-10-13T16:59:45.200169",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([-1.,  0.,  1.,  2.]), array([ 3990,  3800, 25444, 17771]))"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.unique(data.y, return_counts=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.03789,
     "end_time": "2020-10-13T16:59:45.345586",
     "exception": false,
     "start_time": "2020-10-13T16:59:45.307696",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The class -1 represents uncertainty in the FLI-based classication. If desired, we can remove that class from the dataset, by changing the flag `add_uncertainty_class` in the cell below. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-13T16:59:45.424667Z",
     "iopub.status.busy": "2020-10-13T16:59:45.424144Z",
     "iopub.status.idle": "2020-10-13T16:59:45.451197Z",
     "shell.execute_reply": "2020-10-13T16:59:45.450735Z"
    },
    "papermill": {
     "duration": 0.067978,
     "end_time": "2020-10-13T16:59:45.451314",
     "exception": false,
     "start_time": "2020-10-13T16:59:45.383336",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "wandb.config.add_uncertainty_class = False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-13T16:59:45.532359Z",
     "iopub.status.busy": "2020-10-13T16:59:45.531830Z",
     "iopub.status.idle": "2020-10-13T16:59:45.612231Z",
     "shell.execute_reply": "2020-10-13T16:59:45.611776Z"
    },
    "papermill": {
     "duration": 0.121761,
     "end_time": "2020-10-13T16:59:45.612347",
     "exception": false,
     "start_time": "2020-10-13T16:59:45.490586",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "TSDataChaos:\n",
       " Datasets names (concatenated): ['eps=0.021', 'eps=0.022', 'eps=0.023', 'eps=0.024', 'eps=0.025']\n",
       " Filenames:                     [(Path('/home/user/data/fli_rotnum/model_1/eps=0.021/Poincare.plt'), Path('/home/user/data/fli_rotnum/model_1/eps=0.021/index_fli_rotnum_birav.plt')), (Path('/home/user/data/fli_rotnum/model_1/eps=0.022/Poincare.plt'), Path('/home/user/data/fli_rotnum/model_1/eps=0.022/index_fli_rotnum_birav.plt')), (Path('/home/user/data/fli_rotnum/model_1/eps=0.023/Poincare.plt'), Path('/home/user/data/fli_rotnum/model_1/eps=0.023/index_fli_rotnum_birav.plt')), (Path('/home/user/data/fli_rotnum/model_1/eps=0.024/Poincare.plt'), Path('/home/user/data/fli_rotnum/model_1/eps=0.024/index_fli_rotnum_birav.plt')), (Path('/home/user/data/fli_rotnum/model_1/eps=0.025/Poincare.plt'), Path('/home/user/data/fli_rotnum/model_1/eps=0.025/index_fli_rotnum_birav.plt'))]\n",
       " Data shape: (47015, 2, 201)\n",
       " Targets shape: (47015,)\n",
       " Nb Samples: 47015\n",
       " Nb Channels:           2\n",
       " Sequence Length: 201"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# TODO: Move this to a function\n",
    "if not wandb.config.add_uncertainty_class:\n",
    "    data.x = data.x[data.y != -1]\n",
    "    data.ds = data.ds[data.y != -1]\n",
    "    data.y = data.y[data.y != -1]\n",
    "data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.038998,
     "end_time": "2020-10-13T16:59:45.691146",
     "exception": false,
     "start_time": "2020-10-13T16:59:45.652148",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The data can be resampled to a lower frequency if desired. The reason why this is interesting is because being able to produce an accurate classification without the need of many data points per time series makes this procedure applicable to observational data. As an example, choosing `resampling_period` equals to 2 means that the time series will be resampled in a way that we take one point every 2 points of the original data.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-13T16:59:45.771455Z",
     "iopub.status.busy": "2020-10-13T16:59:45.770959Z",
     "iopub.status.idle": "2020-10-13T16:59:45.797204Z",
     "shell.execute_reply": "2020-10-13T16:59:45.796761Z"
    },
    "papermill": {
     "duration": 0.067459,
     "end_time": "2020-10-13T16:59:45.797322",
     "exception": false,
     "start_time": "2020-10-13T16:59:45.729863",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "wandb.config.resampling_period = resampling_period"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-13T16:59:45.881124Z",
     "iopub.status.busy": "2020-10-13T16:59:45.880613Z",
     "iopub.status.idle": "2020-10-13T16:59:45.908449Z",
     "shell.execute_reply": "2020-10-13T16:59:45.907036Z"
    },
    "papermill": {
     "duration": 0.069819,
     "end_time": "2020-10-13T16:59:45.908570",
     "exception": false,
     "start_time": "2020-10-13T16:59:45.838751",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "if wandb.config.resampling_period is not None:\n",
    "    data.x = data.x[:,:,::wandb.config.resampling_period]\n",
    "    print(data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.038495,
     "end_time": "2020-10-13T16:59:45.986883",
     "exception": false,
     "start_time": "2020-10-13T16:59:45.948388",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We'll use a dictionary to establish how to label each index to an actual human-readable label"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-13T16:59:46.067281Z",
     "iopub.status.busy": "2020-10-13T16:59:46.066739Z",
     "iopub.status.idle": "2020-10-13T16:59:46.092308Z",
     "shell.execute_reply": "2020-10-13T16:59:46.092754Z"
    },
    "papermill": {
     "duration": 0.067792,
     "end_time": "2020-10-13T16:59:46.092892",
     "exception": false,
     "start_time": "2020-10-13T16:59:46.025100",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "lbl_dict = dict([\n",
    "    ('-1.0', 'uncertain'),\n",
    "    ('0.0', 'chaotic'),   \n",
    "    ('1.0', 'rotational'),   \n",
    "    ('2.0', 'librational')]\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.038922,
     "end_time": "2020-10-13T16:59:46.172065",
     "exception": false,
     "start_time": "2020-10-13T16:59:46.133143",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Splitting the data into training and validation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.038788,
     "end_time": "2020-10-13T16:59:46.250065",
     "exception": false,
     "start_time": "2020-10-13T16:59:46.211277",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "One easy option to split data is to use 80% random items from the data as training and 20% as validation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-13T16:59:46.330681Z",
     "iopub.status.busy": "2020-10-13T16:59:46.330145Z",
     "iopub.status.idle": "2020-10-13T16:59:46.514177Z",
     "shell.execute_reply": "2020-10-13T16:59:46.513693Z"
    },
    "papermill": {
     "duration": 0.225554,
     "end_time": "2020-10-13T16:59:46.514294",
     "exception": false,
     "start_time": "2020-10-13T16:59:46.288740",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "splits = RandomSplitter()(range_of(data.get_items()))\n",
    "#splits = (range_of(data.get_items()), range_of(data.get_items())) # Valid = train"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.038984,
     "end_time": "2020-10-13T16:59:46.592867",
     "exception": false,
     "start_time": "2020-10-13T16:59:46.553883",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Another way to split the data, which is more sensible if we want to ensure that the knowledge in the model can be transferred to unknown dynamic models, is to ensure that motions in the validation set are not included in the training set. We can do this by ensuring that the motions of the validation set belong to a specific dynamic model, and the rest of dynamics will be used for training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-13T16:59:46.703663Z",
     "iopub.status.busy": "2020-10-13T16:59:46.703149Z",
     "iopub.status.idle": "2020-10-13T16:59:46.728648Z",
     "shell.execute_reply": "2020-10-13T16:59:46.728109Z"
    },
    "papermill": {
     "duration": 0.097163,
     "end_time": "2020-10-13T16:59:46.728766",
     "exception": false,
     "start_time": "2020-10-13T16:59:46.631603",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "wandb.config.val_ds = val_dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-13T16:59:46.811572Z",
     "iopub.status.busy": "2020-10-13T16:59:46.811077Z",
     "iopub.status.idle": "2020-10-13T16:59:46.837896Z",
     "shell.execute_reply": "2020-10-13T16:59:46.837368Z"
    },
    "papermill": {
     "duration": 0.06848,
     "end_time": "2020-10-13T16:59:46.838013",
     "exception": false,
     "start_time": "2020-10-13T16:59:46.769533",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([18990, 18991, 18992, ..., 28288, 28289, 28290])"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "val_idxs = np.where(data.ds == data.dsname.index(val_dataset))[0]\n",
    "val_idxs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-13T16:59:46.921333Z",
     "iopub.status.busy": "2020-10-13T16:59:46.920806Z",
     "iopub.status.idle": "2020-10-13T16:59:46.987037Z",
     "shell.execute_reply": "2020-10-13T16:59:46.986486Z"
    },
    "papermill": {
     "duration": 0.108842,
     "end_time": "2020-10-13T16:59:46.987157",
     "exception": false,
     "start_time": "2020-10-13T16:59:46.878315",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((#37714) [0,1,2,3,4,5,6,7,8,9...],\n",
       " (#9301) [18990,18991,18992,18993,18994,18995,18996,18997,18998,18999...])"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "splits = IndexSplitter(val_idxs)(data.get_items())\n",
    "splits"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.039961,
     "end_time": "2020-10-13T16:59:47.067217",
     "exception": false,
     "start_time": "2020-10-13T16:59:47.027256",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "##  Creating a `Datasets` object"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-13T16:59:47.149404Z",
     "iopub.status.busy": "2020-10-13T16:59:47.148905Z",
     "iopub.status.idle": "2020-10-13T16:59:47.173664Z",
     "shell.execute_reply": "2020-10-13T16:59:47.174106Z"
    },
    "papermill": {
     "duration": 0.067561,
     "end_time": "2020-10-13T16:59:47.174243",
     "exception": false,
     "start_time": "2020-10-13T16:59:47.106682",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "tfms = [[ItemGetter(0), ToTensorTS(), ToTensorMotion()], # x transforms\n",
    "        [ItemGetter(1), lbl_dict.get, Categorize()]] # y transforms"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-13T16:59:47.258635Z",
     "iopub.status.busy": "2020-10-13T16:59:47.258107Z",
     "iopub.status.idle": "2020-10-13T16:59:51.913911Z",
     "shell.execute_reply": "2020-10-13T16:59:51.914354Z"
    },
    "papermill": {
     "duration": 4.698667,
     "end_time": "2020-10-13T16:59:51.914486",
     "exception": false,
     "start_time": "2020-10-13T16:59:47.215819",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 4.62 s, sys: 3.87 ms, total: 4.62 s\n",
      "Wall time: 4.63 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "ds = Datasets(items=data.get_items(), tfms=tfms, splits=splits)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.040188,
     "end_time": "2020-10-13T16:59:51.996566",
     "exception": false,
     "start_time": "2020-10-13T16:59:51.956378",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Show one element of the dataset. By default, the `show` method will display the item as a Poincare map."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-13T16:59:52.081257Z",
     "iopub.status.busy": "2020-10-13T16:59:52.080728Z",
     "iopub.status.idle": "2020-10-13T16:59:52.271263Z",
     "shell.execute_reply": "2020-10-13T16:59:52.271677Z"
    },
    "papermill": {
     "duration": 0.233602,
     "end_time": "2020-10-13T16:59:52.271814",
     "exception": false,
     "start_time": "2020-10-13T16:59:52.038212",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "rotational\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = show_at(ds, 1003, figsize=(1,1))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.040594,
     "end_time": "2020-10-13T16:59:52.355986",
     "exception": false,
     "start_time": "2020-10-13T16:59:52.315392",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "It can be useful to visualize the motions with he same y limits. We take them from the training set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-13T16:59:52.445431Z",
     "iopub.status.busy": "2020-10-13T16:59:52.444919Z",
     "iopub.status.idle": "2020-10-13T16:59:52.493279Z",
     "shell.execute_reply": "2020-10-13T16:59:52.493694Z"
    },
    "papermill": {
     "duration": 0.096897,
     "end_time": "2020-10-13T16:59:52.493831",
     "exception": false,
     "start_time": "2020-10-13T16:59:52.396934",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[-0.621060974808266, 1.62106097480744]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ylim = [data.x[:, 1].min(), data.x[:, 1].max()]\n",
    "ylim"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-13T16:59:52.580867Z",
     "iopub.status.busy": "2020-10-13T16:59:52.580358Z",
     "iopub.status.idle": "2020-10-13T16:59:52.766782Z",
     "shell.execute_reply": "2020-10-13T16:59:52.766240Z"
    },
    "papermill": {
     "duration": 0.230605,
     "end_time": "2020-10-13T16:59:52.766898",
     "exception": false,
     "start_time": "2020-10-13T16:59:52.536293",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "rotational\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = show_at(ds, 1003, figsize=(1,1), ylim=ylim)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.042324,
     "end_time": "2020-10-13T16:59:52.852491",
     "exception": false,
     "start_time": "2020-10-13T16:59:52.810167",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Creating a `Dataloaders` object"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-13T16:59:52.939776Z",
     "iopub.status.busy": "2020-10-13T16:59:52.939250Z",
     "iopub.status.idle": "2020-10-13T16:59:55.662326Z",
     "shell.execute_reply": "2020-10-13T16:59:55.661786Z"
    },
    "papermill": {
     "duration": 2.768175,
     "end_time": "2020-10-13T16:59:55.662447",
     "exception": false,
     "start_time": "2020-10-13T16:59:52.894272",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "bs = 256                            \n",
    "# Normalize at batch time\n",
    "tfm_norm = Standardize(scale_subtype = 'per_sample')\n",
    "batch_tfms = []\n",
    "\n",
    "dls = ds.dataloaders(bs=bs, val_bs=bs * 2, after_batch=batch_tfms, num_workers=0, device=default_device()) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-13T16:59:55.750922Z",
     "iopub.status.busy": "2020-10-13T16:59:55.750351Z",
     "iopub.status.idle": "2020-10-13T16:59:57.074387Z",
     "shell.execute_reply": "2020-10-13T16:59:57.074856Z"
    },
    "papermill": {
     "duration": 1.369485,
     "end_time": "2020-10-13T16:59:57.074992",
     "exception": false,
     "start_time": "2020-10-13T16:59:55.705507",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x864 with 9 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "dls.show_batch(max_n=9, ylim=ylim, return_fig=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-13T16:59:57.165613Z",
     "iopub.status.busy": "2020-10-13T16:59:57.165104Z",
     "iopub.status.idle": "2020-10-13T16:59:57.386676Z",
     "shell.execute_reply": "2020-10-13T16:59:57.386216Z"
    },
    "papermill": {
     "duration": 0.267795,
     "end_time": "2020-10-13T16:59:57.386794",
     "exception": false,
     "start_time": "2020-10-13T16:59:57.118999",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([178.2151,  -0.4584], device='cuda:0') tensor([1.0056e+02, 4.2195e-02], device='cuda:0')\n"
     ]
    }
   ],
   "source": [
    "xb, yb = dls.one_batch()\n",
    "print(xb[0].mean(axis=1), xb[0].std(axis=1))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.043505,
     "end_time": "2020-10-13T16:59:57.475168",
     "exception": false,
     "start_time": "2020-10-13T16:59:57.431663",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Training a model "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-13T16:59:57.565664Z",
     "iopub.status.busy": "2020-10-13T16:59:57.565153Z",
     "iopub.status.idle": "2020-10-13T16:59:57.591811Z",
     "shell.execute_reply": "2020-10-13T16:59:57.592225Z"
    },
    "papermill": {
     "duration": 0.073249,
     "end_time": "2020-10-13T16:59:57.592365",
     "exception": false,
     "start_time": "2020-10-13T16:59:57.519116",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2, 3)"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Number of channels\n",
    "c_in = get_n_channels(dls.train) # data.n_channels\n",
    "# Number of classes\n",
    "c_out= dls.c \n",
    "c_in,c_out"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-13T16:59:57.684996Z",
     "iopub.status.busy": "2020-10-13T16:59:57.684467Z",
     "iopub.status.idle": "2020-10-13T16:59:57.722102Z",
     "shell.execute_reply": "2020-10-13T16:59:57.722568Z"
    },
    "papermill": {
     "duration": 0.08485,
     "end_time": "2020-10-13T16:59:57.722705",
     "exception": false,
     "start_time": "2020-10-13T16:59:57.637855",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model = inception_time(c_in, c_out).to(device=default_device())\n",
    "# model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.043883,
     "end_time": "2020-10-13T16:59:57.810886",
     "exception": false,
     "start_time": "2020-10-13T16:59:57.767003",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Creating a Learner object"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-13T16:59:57.907323Z",
     "iopub.status.busy": "2020-10-13T16:59:57.906808Z",
     "iopub.status.idle": "2020-10-13T16:59:57.933372Z",
     "shell.execute_reply": "2020-10-13T16:59:57.932893Z"
    },
    "papermill": {
     "duration": 0.077865,
     "end_time": "2020-10-13T16:59:57.933492",
     "exception": false,
     "start_time": "2020-10-13T16:59:57.855627",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# opt_func = partial(Adam, lr=3e-3, wd=0.01)\n",
    "#Or use Ranger\n",
    "def opt_func(p, lr=slice(3e-3)): return Lookahead(RAdam(p, lr=lr, mom=0.95, wd=0.01)) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-13T16:59:58.026019Z",
     "iopub.status.busy": "2020-10-13T16:59:58.025523Z",
     "iopub.status.idle": "2020-10-13T16:59:58.054179Z",
     "shell.execute_reply": "2020-10-13T16:59:58.054635Z"
    },
    "papermill": {
     "duration": 0.076132,
     "end_time": "2020-10-13T16:59:58.054775",
     "exception": false,
     "start_time": "2020-10-13T16:59:57.978643",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Learner    \n",
    "loss_func = LabelSmoothingCrossEntropy() \n",
    "learn = Learner(dls, model, opt_func=opt_func, \n",
    "                loss_func=loss_func, metrics=accuracy)\n",
    "\n",
    "# print(learn.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-13T16:59:58.147289Z",
     "iopub.status.busy": "2020-10-13T16:59:58.146790Z",
     "iopub.status.idle": "2020-10-13T17:00:19.994707Z",
     "shell.execute_reply": "2020-10-13T17:00:19.995149Z"
    },
    "papermill": {
     "duration": 21.895197,
     "end_time": "2020-10-13T17:00:19.995285",
     "exception": false,
     "start_time": "2020-10-13T16:59:58.100088",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "(0.03630780577659607, 0.0004786300996784121)"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "lr_min, lr_steep = learn.lr_find()\n",
    "lr_min, lr_steep"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-13T17:00:20.094749Z",
     "iopub.status.busy": "2020-10-13T17:00:20.094206Z"
    },
    "papermill": {
     "duration": 132.196684,
     "end_time": "2020-10-13T17:02:32.242118",
     "exception": false,
     "start_time": "2020-10-13T17:00:20.045434",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WandbCallback requires use of \"SaveModelCallback\" to log best model\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "\n",
       "    <div>\n",
       "        <style>\n",
       "            /* Turns off some styling */\n",
       "            progress {\n",
       "                /* gets rid of default border in Firefox and Opera. */\n",
       "                border: none;\n",
       "                /* Needs to be in here for Safari polyfill so background images work as expected. */\n",
       "                background-size: auto;\n",
       "            }\n",
       "            .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n",
       "                background: #F44336;\n",
       "            }\n",
       "        </style>\n",
       "      <progress value='3' class='' max='10' style='width:300px; height:20px; vertical-align: middle;'></progress>\n",
       "      30.00% [3/10 01:45<04:05]\n",
       "    </div>\n",
       "    \n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: left;\">\n",
       "      <th>epoch</th>\n",
       "      <th>train_loss</th>\n",
       "      <th>valid_loss</th>\n",
       "      <th>accuracy</th>\n",
       "      <th>time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0.639177</td>\n",
       "      <td>0.483269</td>\n",
       "      <td>0.894205</td>\n",
       "      <td>00:35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0.461417</td>\n",
       "      <td>0.422545</td>\n",
       "      <td>0.928395</td>\n",
       "      <td>00:34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0.416308</td>\n",
       "      <td>0.420230</td>\n",
       "      <td>0.930868</td>\n",
       "      <td>00:35</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table><p>\n",
       "\n",
       "    <div>\n",
       "        <style>\n",
       "            /* Turns off some styling */\n",
       "            progress {\n",
       "                /* gets rid of default border in Firefox and Opera. */\n",
       "                border: none;\n",
       "                /* Needs to be in here for Safari polyfill so background images work as expected. */\n",
       "                background-size: auto;\n",
       "            }\n",
       "            .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n",
       "                background: #F44336;\n",
       "            }\n",
       "        </style>\n",
       "      <progress value='139' class='' max='147' style='width:300px; height:20px; vertical-align: middle;'></progress>\n",
       "      94.56% [139/147 00:27<00:01 0.3924]\n",
       "    </div>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "learn.fit_one_cycle(10, lr_max=1e-3, cbs=WandbCallback(log_preds=False))\n",
    "learn.recorder.plot_loss()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Showing results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Results for random items in the validation set "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "learn.show_results(max_n=9, ylim=ylim)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Confusion matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "interp = ClassificationInterpretationAugmented.from_learner(learn)\n",
    "interp.plot_confusion_matrix()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Smallest errors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "interp.plot_top_losses(k=9, figsize=(15, 15), largest=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Largest errores"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "interp.plot_top_losses(k=15, figsize=(15, 15), nrows=5, largest=True, ylim=ylim)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Specific types of errors"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "It is also interesting to display separately errors of different type. There are a number of `c*(c-1)` possible type of errors, where `c` is the number of classes in the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "print(interp.top_losses(k=3, largest=False, predicted='chaotic', actual='chaotic'))\n",
    "print(interp.top_losses(k=3, largest=False, predicted='rotational', actual='rotational'))\n",
    "print(interp.top_losses(k=3, largest=False, predicted='librational', actual='librational'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "predicted = 'chaotic'\n",
    "actual = 'chaotic'\n",
    "n_errors = interp.confusion_matrix()[interp.vocab.o2i[predicted], \n",
    "                                     interp.vocab.o2i[actual]]\n",
    "interp.plot_top_losses(k=min(n_errors, 9), figsize=(15, 15), \n",
    "                       largest=True, ylim=ylim, \n",
    "                       predicted=predicted, \n",
    "                       actual=actual)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Overview of the results through a labelled initial condition map"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Show each motion in the validation set in a Poincare map showing just its initial point (x0, y0), coloured by the dynamical index associated to it. We will plot two figures, one with the dynamical index given by the ML model (predictions) and one with the true dynamic indices given by the `labelling_method`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "ml_map = show_labelled_ic_map(interp.inputs[0], \n",
    "                    [dls.tfms[1].decode(y) for y in interp.decoded], \n",
    "                    legend=None,\n",
    "                    palette=dict(\n",
    "                        chaotic='yellow', \n",
    "                        librational='blue', \n",
    "                        rotational='magenta'))\n",
    "\n",
    "wandb.log({f'ML map ({val_dataset})': ml_map.figure})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "true_map = show_labelled_ic_map(interp.inputs[0], \n",
    "                    [dls.tfms[1].decode(y) for y in interp.targs], \n",
    "                    legend=None,\n",
    "                    palette=dict(\n",
    "                        chaotic='yellow', \n",
    "                        librational='blue', \n",
    "                        rotational='magenta'))\n",
    "\n",
    "wandb.log({f'True map ({val_dataset})': ml_map.figure})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Explaining the model predictions through class activation maps (TODO)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We will use the function `show_cam` from the library `timeseries` to plot the Class Activation Maps (CAMs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "?show_cam"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We need a function `i2o` that, given an encoded y, i.e, an instance of `TensorCategory`, return the label associated to that index, i.e., we need to decode the labels."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def i2o(y):\n",
    "    return dls.tfms[1].decode(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "print(i2o(TensorCategory(0)))\n",
    "print(i2o(TensorCategory(1)))\n",
    "print(i2o(TensorCategory(2)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Inference on a new test set"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now let's see how the trained behaves with a completely unseen set of data. First we have to load the Poincare maps that comprise the test set"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Compute the predicted labels using the library `fastinference`. It is faster than the original `fastai` implementation."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#old_get_preds = learn.get_preds\n",
    "#from fastinference.inference import *"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "test_base_path = base_path/'data/eps=0.02_pert_pend_model_2'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "fnames_test = (test_base_path/'Poincare200pt.plt', \n",
    "               test_base_path/'index200pt.plt')\n",
    "test_data = TSDataChaos.from_poincare_and_index_files(fnames_test)\n",
    "test_data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "if not wandb.config.add_uncertainty_class:\n",
    "    test_data.x = test_data.x[test_data.y != -1]\n",
    "    test_data.y = test_data.y[test_data.y != -1]\n",
    "test_data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Create a dataloader from the test items previously loaded. This will apply all the transformations used in our training and validation set (e.g. normalization) to the test data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "test_dl = learn.dls.test_dl(test_data.get_items(), with_labels=True)\n",
    "test_dl.n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "preds, targs, preds_decoded = learn.get_preds(dl=test_dl, with_decoded=True)\n",
    "preds.__len__()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Compute metrics (validation loss and accuracy) on the test set."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "test_metrics = learn.validate(dl=test_dl)\n",
    "test_metrics"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Show also trhe confusion matrix for this test set"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# learn.get_preds = old_get_preds\n",
    "interp_test = ClassificationInterpretationAugmented.from_learner(learn, \n",
    "                                                                 dl=test_dl)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "interp_test.plot_confusion_matrix(\n",
    "    title=f'Confusion matrix (accuracy={round(test_metrics[1], 2)})',\n",
    ")\n",
    "plt.savefig(test_base_path/f'confusion_matrix_{test_base_path.name}.png')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Show the FLI plot to get a sense of the quality of the predictions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "ml_map = show_fli_plot(test_data.x, \n",
    "                    [dls.tfms[1].decode(y) for y in preds_decoded], \n",
    "                    legend=None,\n",
    "                    palette=dict(\n",
    "                        chaotic='yellow', \n",
    "                        librational='blue', \n",
    "                        rotational='magenta'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "ml_map.figure.savefig(test_base_path/f'ml_map_{test_base_path.name}.eps', \n",
    "                      transparent=True, format='.eps')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now show the same plot for the true labels given by the FLI-based classification"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "true_map = show_fli_plot(test_data.x, \n",
    "                    [dls.tfms[1].decode(y) for y in targs], \n",
    "                    legend=None,\n",
    "                    palette=dict(\n",
    "                        chaotic='yellow', \n",
    "                        librational='blue', \n",
    "                        rotational='magenta'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "true_map.figure.savefig(test_base_path/f'true_map_{test_base_path.name}.eps', \n",
    "                        transparent=True, format='.eps')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  },
  "papermill": {
   "duration": 183.06824,
   "end_time": "2020-10-13T17:02:32.952107",
   "environment_variables": {},
   "exception": null,
   "input_path": "nbs/_motion_classification_time_series.ipynb",
   "output_path": "--",
   "parameters": {
    "labelling_method": "fli",
    "use_wandb": true,
    "wandb_group": "x_labelling_method"
   },
   "start_time": "2020-10-13T16:59:29.883867",
   "version": "2.1.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}