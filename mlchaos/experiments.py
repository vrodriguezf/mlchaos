# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/experiments.ipynb (unless otherwise specified).

__all__ = ['x_sequence_length', 'x_next_epsilon']

# Cell
import papermill as pm
import numpy as np
from fastcore.all import *

# Cell
@call_parse
def x_sequence_length(min_rp:Param("Minimum resampling period", int)=1,
                      max_rp:Param("Maximum resampling period", int)=10,
                      rep_times:Param("Number of times ru run per rp", int)=10,
                      nbs_folder:Param("Notebook folder path", str)='.'):
    for x in range(min_rp, max_rp+1):
        for _ in range(rep_times):
            pm.execute_notebook(input_path=f'{Path(nbs_folder)}/_motion_classification_time_series.ipynb',
                                output_path='--',
                                parameters=dict(
                                    use_wandb=True,
                                    wandb_group='x_sequence_length',
                                    resampling_period=x
                                ))

# Cell
@call_parse
def x_next_epsilon(nbs_folder:Param("Notebook folder path", str)='.'):
    base_path = Path.home()
    ds_path = base_path/'data/fli_rotnum/model_1'
    fnames = L(
        (ds_path/'eps=0.021/Poincare.plt', ds_path/'eps=0.021/index_fli_rotnum_birav.plt'),
        (ds_path/'eps=0.022/Poincare.plt', ds_path/'eps=0.022/index_fli_rotnum_birav.plt'),
        (ds_path/'eps=0.023/Poincare.plt', ds_path/'eps=0.023/index_fli_rotnum_birav.plt'),
        (ds_path/'eps=0.024/Poincare.plt', ds_path/'eps=0.024/index_fli_rotnum_birav.plt'),
        (ds_path/'eps=0.025/Poincare.plt', ds_path/'eps=0.025/index_fli_rotnum_birav.plt'),
    )
    for i in range(2, len(fnames)+1):
        x_input = L(fnames[:i])
        val_dataset = x_input[-1][0].parent.name
        print(val_dataset)
        pm.execute_notebook(input_path=f'{Path(nbs_folder)}/_motion_classification_time_series.ipynb',
                            output_path='./__.ipynb',
                            parameters=dict(
                                use_wandb=True,
                                wandb_group='x_next_epsilon',
                                val_dataset = val_dataset,
                                fnames_poinc_map=list(x_input.itemgot(0).map(str)),
                                fnames_index=list(x_input.itemgot(1).map(str))
                            ))